type User {
  id: String!
  email: String!
  token: String!
  username: String!
  bio: String
  image: String
}

type Profile {
  id: String!
  username: String!
  bio: String
  image: String
  following: Boolean
}

type Article {
  id: String!
  slug: String!
  title: String!
  description: String!
  body: String!
  tags(first: Int, last: Int, before: String, after: String): [Tag!]!
  createdAt: String!
  updatedAt: String!
  favorited: Boolean
  favoritesCount: Int!
  author: Profile!
  comments(first: Int, last: Int, before: String, after: String): [Comment!]!
}

type Comment {
  id: String!
  createdAt: String!
  updatedAt: String!
  body: String!
  author: Profile!
}

type Tag {
  id: String!
  name: String!
}

type Query {
  me: User!
  profile(username: String!): Profile
  articles(
    tag: String
    author: String
    favorited: Boolean
    first: Int
    last: Int
    before: String
    after: String
  ): [Article!]!
  feed(first: Int, last: Int, before: String, after: String): [Article!]!
  article(slug: String!): Article
  tags(first: Int, last: Int, before: String, after: String): [Tag!]!
}

type Mutation {
  # No authentication required
  login(input: LoginPayload!): User!
  # No authentication required
  register(input: RegisterPayload!): User!
  # Requires authentication
  updateMe(input: UpdateMePayload!): User!
  # Requires authentication
  followUser(username: String!): Profile!
  # Requires authentication
  unfollowUser(username: String!): Profile!
  # Requires authentication
  createArticle(input: CreateArticlePayload!): Article!
  # Requires authentication
  updateArticle(input: UpdateArticlePayload!): Article!
  # Requires authentication
  deleteArticle(slug: String!): Article!
  # Requires authentication
  addComment(slug: String!, body: String!): Comment!
  # Requires authentication
  deleteComment(id: String!): Comment!
  # Requires authentication
  favoriteArticle(slug: String!): Article!
  # Requires authentication
  unfavoriteArticle(slug: String!): Article!
}

input LoginPayload {
  email: String!
  password: String!
}

input RegisterPayload {
  username: String!
  email: String!
  password: String!
}

input UpdateMePayload {
  email: String
  username: String
  password: String
  bio: String
  image: String
}

input CreateArticlePayload {
  title: String!
  description: String!
  body: String!
  tags: [String!]!
}

input UpdateArticlePayload {
  slug: String!
  title: String
  description: String
  body: String
}
